// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: proto/api.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShowBgpIpv6SummaryServiceClient is the client API for ShowBgpIpv6SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowBgpIpv6SummaryServiceClient interface {
	ShowBgpIpv6Summary(ctx context.Context, in *ShowBgpIpv6SummaryRequest, opts ...grpc.CallOption) (*ShowBgpIpv6SummaryResult, error)
}

type showBgpIpv6SummaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShowBgpIpv6SummaryServiceClient(cc grpc.ClientConnInterface) ShowBgpIpv6SummaryServiceClient {
	return &showBgpIpv6SummaryServiceClient{cc}
}

func (c *showBgpIpv6SummaryServiceClient) ShowBgpIpv6Summary(ctx context.Context, in *ShowBgpIpv6SummaryRequest, opts ...grpc.CallOption) (*ShowBgpIpv6SummaryResult, error) {
	out := new(ShowBgpIpv6SummaryResult)
	err := c.cc.Invoke(ctx, "/api.ShowBgpIpv6SummaryService/ShowBgpIpv6Summary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowBgpIpv6SummaryServiceServer is the server API for ShowBgpIpv6SummaryService service.
// All implementations should embed UnimplementedShowBgpIpv6SummaryServiceServer
// for forward compatibility
type ShowBgpIpv6SummaryServiceServer interface {
	ShowBgpIpv6Summary(context.Context, *ShowBgpIpv6SummaryRequest) (*ShowBgpIpv6SummaryResult, error)
}

// UnimplementedShowBgpIpv6SummaryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShowBgpIpv6SummaryServiceServer struct {
}

func (UnimplementedShowBgpIpv6SummaryServiceServer) ShowBgpIpv6Summary(context.Context, *ShowBgpIpv6SummaryRequest) (*ShowBgpIpv6SummaryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBgpIpv6Summary not implemented")
}

// UnsafeShowBgpIpv6SummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowBgpIpv6SummaryServiceServer will
// result in compilation errors.
type UnsafeShowBgpIpv6SummaryServiceServer interface {
	mustEmbedUnimplementedShowBgpIpv6SummaryServiceServer()
}

func RegisterShowBgpIpv6SummaryServiceServer(s grpc.ServiceRegistrar, srv ShowBgpIpv6SummaryServiceServer) {
	s.RegisterService(&ShowBgpIpv6SummaryService_ServiceDesc, srv)
}

func _ShowBgpIpv6SummaryService_ShowBgpIpv6Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBgpIpv6SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowBgpIpv6SummaryServiceServer).ShowBgpIpv6Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ShowBgpIpv6SummaryService/ShowBgpIpv6Summary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowBgpIpv6SummaryServiceServer).ShowBgpIpv6Summary(ctx, req.(*ShowBgpIpv6SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowBgpIpv6SummaryService_ServiceDesc is the grpc.ServiceDesc for ShowBgpIpv6SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowBgpIpv6SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ShowBgpIpv6SummaryService",
	HandlerType: (*ShowBgpIpv6SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowBgpIpv6Summary",
			Handler:    _ShowBgpIpv6SummaryService_ShowBgpIpv6Summary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// RouteMapServiceClient is the client API for RouteMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteMapServiceClient interface {
	ShowRouteMap(ctx context.Context, in *ShowRouteMapRequest, opts ...grpc.CallOption) (*ShowRouteMapResult, error)
	SetMed(ctx context.Context, in *SetMedRequest, opts ...grpc.CallOption) (*SetMedResult, error)
}

type routeMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteMapServiceClient(cc grpc.ClientConnInterface) RouteMapServiceClient {
	return &routeMapServiceClient{cc}
}

func (c *routeMapServiceClient) ShowRouteMap(ctx context.Context, in *ShowRouteMapRequest, opts ...grpc.CallOption) (*ShowRouteMapResult, error) {
	out := new(ShowRouteMapResult)
	err := c.cc.Invoke(ctx, "/api.RouteMapService/ShowRouteMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeMapServiceClient) SetMed(ctx context.Context, in *SetMedRequest, opts ...grpc.CallOption) (*SetMedResult, error) {
	out := new(SetMedResult)
	err := c.cc.Invoke(ctx, "/api.RouteMapService/SetMed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteMapServiceServer is the server API for RouteMapService service.
// All implementations should embed UnimplementedRouteMapServiceServer
// for forward compatibility
type RouteMapServiceServer interface {
	ShowRouteMap(context.Context, *ShowRouteMapRequest) (*ShowRouteMapResult, error)
	SetMed(context.Context, *SetMedRequest) (*SetMedResult, error)
}

// UnimplementedRouteMapServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRouteMapServiceServer struct {
}

func (UnimplementedRouteMapServiceServer) ShowRouteMap(context.Context, *ShowRouteMapRequest) (*ShowRouteMapResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRouteMap not implemented")
}
func (UnimplementedRouteMapServiceServer) SetMed(context.Context, *SetMedRequest) (*SetMedResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMed not implemented")
}

// UnsafeRouteMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteMapServiceServer will
// result in compilation errors.
type UnsafeRouteMapServiceServer interface {
	mustEmbedUnimplementedRouteMapServiceServer()
}

func RegisterRouteMapServiceServer(s grpc.ServiceRegistrar, srv RouteMapServiceServer) {
	s.RegisterService(&RouteMapService_ServiceDesc, srv)
}

func _RouteMapService_ShowRouteMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRouteMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteMapServiceServer).ShowRouteMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RouteMapService/ShowRouteMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteMapServiceServer).ShowRouteMap(ctx, req.(*ShowRouteMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteMapService_SetMed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteMapServiceServer).SetMed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RouteMapService/SetMed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteMapServiceServer).SetMed(ctx, req.(*SetMedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteMapService_ServiceDesc is the grpc.ServiceDesc for RouteMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RouteMapService",
	HandlerType: (*RouteMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowRouteMap",
			Handler:    _RouteMapService_ShowRouteMap_Handler,
		},
		{
			MethodName: "SetMed",
			Handler:    _RouteMapService_SetMed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// InterfaceServiceClient is the client API for InterfaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceServiceClient interface {
	ShowAllInterface(ctx context.Context, in *ShowAllInterfaceRequest, opts ...grpc.CallOption) (*ShowAllInterfaceResult, error)
	ShowOneInterface(ctx context.Context, in *ShowOneInterfaceRequest, opts ...grpc.CallOption) (*ShowOneInterfaceResult, error)
	ConfigInterface(ctx context.Context, in *ConfigInterfaceRequest, opts ...grpc.CallOption) (*ConfigInterfaceResult, error)
}

type interfaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceServiceClient(cc grpc.ClientConnInterface) InterfaceServiceClient {
	return &interfaceServiceClient{cc}
}

func (c *interfaceServiceClient) ShowAllInterface(ctx context.Context, in *ShowAllInterfaceRequest, opts ...grpc.CallOption) (*ShowAllInterfaceResult, error) {
	out := new(ShowAllInterfaceResult)
	err := c.cc.Invoke(ctx, "/api.InterfaceService/ShowAllInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) ShowOneInterface(ctx context.Context, in *ShowOneInterfaceRequest, opts ...grpc.CallOption) (*ShowOneInterfaceResult, error) {
	out := new(ShowOneInterfaceResult)
	err := c.cc.Invoke(ctx, "/api.InterfaceService/ShowOneInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) ConfigInterface(ctx context.Context, in *ConfigInterfaceRequest, opts ...grpc.CallOption) (*ConfigInterfaceResult, error) {
	out := new(ConfigInterfaceResult)
	err := c.cc.Invoke(ctx, "/api.InterfaceService/ConfigInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceServiceServer is the server API for InterfaceService service.
// All implementations should embed UnimplementedInterfaceServiceServer
// for forward compatibility
type InterfaceServiceServer interface {
	ShowAllInterface(context.Context, *ShowAllInterfaceRequest) (*ShowAllInterfaceResult, error)
	ShowOneInterface(context.Context, *ShowOneInterfaceRequest) (*ShowOneInterfaceResult, error)
	ConfigInterface(context.Context, *ConfigInterfaceRequest) (*ConfigInterfaceResult, error)
}

// UnimplementedInterfaceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInterfaceServiceServer struct {
}

func (UnimplementedInterfaceServiceServer) ShowAllInterface(context.Context, *ShowAllInterfaceRequest) (*ShowAllInterfaceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAllInterface not implemented")
}
func (UnimplementedInterfaceServiceServer) ShowOneInterface(context.Context, *ShowOneInterfaceRequest) (*ShowOneInterfaceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowOneInterface not implemented")
}
func (UnimplementedInterfaceServiceServer) ConfigInterface(context.Context, *ConfigInterfaceRequest) (*ConfigInterfaceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigInterface not implemented")
}

// UnsafeInterfaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceServiceServer will
// result in compilation errors.
type UnsafeInterfaceServiceServer interface {
	mustEmbedUnimplementedInterfaceServiceServer()
}

func RegisterInterfaceServiceServer(s grpc.ServiceRegistrar, srv InterfaceServiceServer) {
	s.RegisterService(&InterfaceService_ServiceDesc, srv)
}

func _InterfaceService_ShowAllInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAllInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).ShowAllInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InterfaceService/ShowAllInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).ShowAllInterface(ctx, req.(*ShowAllInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_ShowOneInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowOneInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).ShowOneInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InterfaceService/ShowOneInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).ShowOneInterface(ctx, req.(*ShowOneInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_ConfigInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).ConfigInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InterfaceService/ConfigInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).ConfigInterface(ctx, req.(*ConfigInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterfaceService_ServiceDesc is the grpc.ServiceDesc for InterfaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InterfaceService",
	HandlerType: (*InterfaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowAllInterface",
			Handler:    _InterfaceService_ShowAllInterface_Handler,
		},
		{
			MethodName: "ShowOneInterface",
			Handler:    _InterfaceService_ShowOneInterface_Handler,
		},
		{
			MethodName: "ConfigInterface",
			Handler:    _InterfaceService_ConfigInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
