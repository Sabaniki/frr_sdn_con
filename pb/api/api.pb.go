// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: proto/api.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShowBgpIpv6SummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowBgpIpv6SummaryRequest) Reset() {
	*x = ShowBgpIpv6SummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowBgpIpv6SummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBgpIpv6SummaryRequest) ProtoMessage() {}

func (x *ShowBgpIpv6SummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBgpIpv6SummaryRequest.ProtoReflect.Descriptor instead.
func (*ShowBgpIpv6SummaryRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

// TODO: int32 → int16 にできる部分も多いはず
type ShowBgpIpv6SummaryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId        string                             `protobuf:"bytes,1,opt,name=routerId,proto3" json:"routerId,omitempty"`
	As              int32                              `protobuf:"varint,2,opt,name=as,proto3" json:"as,omitempty"`
	VrfId           int32                              `protobuf:"varint,3,opt,name=vrfId,proto3" json:"vrfId,omitempty"`
	VrfName         string                             `protobuf:"bytes,4,opt,name=vrfName,proto3" json:"vrfName,omitempty"`
	TableVersion    int32                              `protobuf:"varint,5,opt,name=tableVersion,proto3" json:"tableVersion,omitempty"`
	RibCount        int32                              `protobuf:"varint,6,opt,name=ribCount,proto3" json:"ribCount,omitempty"`
	RibMemory       int32                              `protobuf:"varint,7,opt,name=ribMemory,proto3" json:"ribMemory,omitempty"`
	PeerCount       int32                              `protobuf:"varint,8,opt,name=peerCount,proto3" json:"peerCount,omitempty"`
	PeerMemory      int32                              `protobuf:"varint,9,opt,name=peerMemory,proto3" json:"peerMemory,omitempty"`
	PeerGroupCount  int32                              `protobuf:"varint,10,opt,name=peerGroupCount,proto3" json:"peerGroupCount,omitempty"`
	PeerGroupMemory int32                              `protobuf:"varint,11,opt,name=peerGroupMemory,proto3" json:"peerGroupMemory,omitempty"`
	Peers           map[string]*BgpIpv6SummaryPeerInfo `protobuf:"bytes,12,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowBgpIpv6SummaryResult) Reset() {
	*x = ShowBgpIpv6SummaryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowBgpIpv6SummaryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBgpIpv6SummaryResult) ProtoMessage() {}

func (x *ShowBgpIpv6SummaryResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBgpIpv6SummaryResult.ProtoReflect.Descriptor instead.
func (*ShowBgpIpv6SummaryResult) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{1}
}

func (x *ShowBgpIpv6SummaryResult) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *ShowBgpIpv6SummaryResult) GetAs() int32 {
	if x != nil {
		return x.As
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetVrfId() int32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *ShowBgpIpv6SummaryResult) GetTableVersion() int32 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetRibCount() int32 {
	if x != nil {
		return x.RibCount
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetRibMemory() int32 {
	if x != nil {
		return x.RibMemory
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetPeerCount() int32 {
	if x != nil {
		return x.PeerCount
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetPeerMemory() int32 {
	if x != nil {
		return x.PeerMemory
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetPeerGroupCount() int32 {
	if x != nil {
		return x.PeerGroupCount
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetPeerGroupMemory() int32 {
	if x != nil {
		return x.PeerGroupMemory
	}
	return 0
}

func (x *ShowBgpIpv6SummaryResult) GetPeers() map[string]*BgpIpv6SummaryPeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type BgpIpv6SummaryPeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAs                   int32  `protobuf:"varint,1,opt,name=remoteAs,proto3" json:"remoteAs,omitempty"`
	LocalAs                    int32  `protobuf:"varint,2,opt,name=localAs,proto3" json:"localAs,omitempty"`
	Version                    int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	MsgRcvd                    int32  `protobuf:"varint,4,opt,name=msgRcvd,proto3" json:"msgRcvd,omitempty"`
	MsgSent                    int32  `protobuf:"varint,5,opt,name=msgSent,proto3" json:"msgSent,omitempty"`
	TableVersion               int32  `protobuf:"varint,6,opt,name=tableVersion,proto3" json:"tableVersion,omitempty"`
	Outq                       int32  `protobuf:"varint,7,opt,name=outq,proto3" json:"outq,omitempty"`
	Inq                        int32  `protobuf:"varint,8,opt,name=inq,proto3" json:"inq,omitempty"`
	PeerUptime                 string `protobuf:"bytes,9,opt,name=peerUptime,proto3" json:"peerUptime,omitempty"`
	PeerUptimeMsec             uint32 `protobuf:"varint,10,opt,name=peerUptimeMsec,proto3" json:"peerUptimeMsec,omitempty"`
	PeerUptimeEstablishedEpoch uint32 `protobuf:"varint,11,opt,name=peerUptimeEstablishedEpoch,proto3" json:"peerUptimeEstablishedEpoch,omitempty"`
	PfxRcd                     int32  `protobuf:"varint,12,opt,name=pfxRcd,proto3" json:"pfxRcd,omitempty"`
	PfxSnt                     int32  `protobuf:"varint,13,opt,name=pfxSnt,proto3" json:"pfxSnt,omitempty"`
	State                      string `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
	PeerState                  string `protobuf:"bytes,15,opt,name=peerState,proto3" json:"peerState,omitempty"`
	ConnectionsEstablished     int32  `protobuf:"varint,16,opt,name=connectionsEstablished,proto3" json:"connectionsEstablished,omitempty"`
	ConnectionsDropped         int32  `protobuf:"varint,17,opt,name=connectionsDropped,proto3" json:"connectionsDropped,omitempty"`
	Desc                       string `protobuf:"bytes,18,opt,name=desc,proto3" json:"desc,omitempty"`
	IdType                     string `protobuf:"bytes,19,opt,name=idType,proto3" json:"idType,omitempty"`
}

func (x *BgpIpv6SummaryPeerInfo) Reset() {
	*x = BgpIpv6SummaryPeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpIpv6SummaryPeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpIpv6SummaryPeerInfo) ProtoMessage() {}

func (x *BgpIpv6SummaryPeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpIpv6SummaryPeerInfo.ProtoReflect.Descriptor instead.
func (*BgpIpv6SummaryPeerInfo) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{2}
}

func (x *BgpIpv6SummaryPeerInfo) GetRemoteAs() int32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetLocalAs() int32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetMsgRcvd() int32 {
	if x != nil {
		return x.MsgRcvd
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetMsgSent() int32 {
	if x != nil {
		return x.MsgSent
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetTableVersion() int32 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetOutq() int32 {
	if x != nil {
		return x.Outq
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetInq() int32 {
	if x != nil {
		return x.Inq
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetPeerUptime() string {
	if x != nil {
		return x.PeerUptime
	}
	return ""
}

func (x *BgpIpv6SummaryPeerInfo) GetPeerUptimeMsec() uint32 {
	if x != nil {
		return x.PeerUptimeMsec
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetPeerUptimeEstablishedEpoch() uint32 {
	if x != nil {
		return x.PeerUptimeEstablishedEpoch
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetPfxRcd() int32 {
	if x != nil {
		return x.PfxRcd
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetPfxSnt() int32 {
	if x != nil {
		return x.PfxSnt
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpIpv6SummaryPeerInfo) GetPeerState() string {
	if x != nil {
		return x.PeerState
	}
	return ""
}

func (x *BgpIpv6SummaryPeerInfo) GetConnectionsEstablished() int32 {
	if x != nil {
		return x.ConnectionsEstablished
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetConnectionsDropped() int32 {
	if x != nil {
		return x.ConnectionsDropped
	}
	return 0
}

func (x *BgpIpv6SummaryPeerInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *BgpIpv6SummaryPeerInfo) GetIdType() string {
	if x != nil {
		return x.IdType
	}
	return ""
}

type ShowRouteMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowRouteMapRequest) Reset() {
	*x = ShowRouteMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowRouteMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowRouteMapRequest) ProtoMessage() {}

func (x *ShowRouteMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowRouteMapRequest.ProtoReflect.Descriptor instead.
func (*ShowRouteMapRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{3}
}

type ShowRouteMapResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteMaps map[string]*RouteMapInfo `protobuf:"bytes,1,rep,name=routeMaps,proto3" json:"routeMaps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowRouteMapResult) Reset() {
	*x = ShowRouteMapResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowRouteMapResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowRouteMapResult) ProtoMessage() {}

func (x *ShowRouteMapResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowRouteMapResult.ProtoReflect.Descriptor instead.
func (*ShowRouteMapResult) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{4}
}

func (x *ShowRouteMapResult) GetRouteMaps() map[string]*RouteMapInfo {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

type RouteMapInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoked              int32           `protobuf:"varint,1,opt,name=invoked,proto3" json:"invoked,omitempty"`
	DisabledOptimization bool            `protobuf:"varint,2,opt,name=disabledOptimization,proto3" json:"disabledOptimization,omitempty"`
	ProcessedChange      bool            `protobuf:"varint,3,opt,name=processedChange,proto3" json:"processedChange,omitempty"`
	RouteMapRules        []*RouteMapRule `protobuf:"bytes,4,rep,name=routeMapRules,proto3" json:"routeMapRules,omitempty"`
}

func (x *RouteMapInfo) Reset() {
	*x = RouteMapInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMapInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMapInfo) ProtoMessage() {}

func (x *RouteMapInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMapInfo.ProtoReflect.Descriptor instead.
func (*RouteMapInfo) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{5}
}

func (x *RouteMapInfo) GetInvoked() int32 {
	if x != nil {
		return x.Invoked
	}
	return 0
}

func (x *RouteMapInfo) GetDisabledOptimization() bool {
	if x != nil {
		return x.DisabledOptimization
	}
	return false
}

func (x *RouteMapInfo) GetProcessedChange() bool {
	if x != nil {
		return x.ProcessedChange
	}
	return false
}

func (x *RouteMapInfo) GetRouteMapRules() []*RouteMapRule {
	if x != nil {
		return x.RouteMapRules
	}
	return nil
}

type RouteMapRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32    `protobuf:"varint,1,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	Type           string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Invoked        uint32   `protobuf:"varint,3,opt,name=invoked,proto3" json:"invoked,omitempty"`
	MatchClauses   []string `protobuf:"bytes,4,rep,name=matchClauses,proto3" json:"matchClauses,omitempty"`
	SetClauses     []string `protobuf:"bytes,5,rep,name=setClauses,proto3" json:"setClauses,omitempty"`
	Action         string   `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *RouteMapRule) Reset() {
	*x = RouteMapRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMapRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMapRule) ProtoMessage() {}

func (x *RouteMapRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMapRule.ProtoReflect.Descriptor instead.
func (*RouteMapRule) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{6}
}

func (x *RouteMapRule) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *RouteMapRule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RouteMapRule) GetInvoked() uint32 {
	if x != nil {
		return x.Invoked
	}
	return 0
}

func (x *RouteMapRule) GetMatchClauses() []string {
	if x != nil {
		return x.MatchClauses
	}
	return nil
}

func (x *RouteMapRule) GetSetClauses() []string {
	if x != nil {
		return x.SetClauses
	}
	return nil
}

func (x *RouteMapRule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

var File_proto_api_proto protoreflect.FileDescriptor

var file_proto_api_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67,
	0x70, 0x49, 0x70, 0x76, 0x36, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xfb, 0x03, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x72, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x72, 0x66,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x69, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x69, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x69, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x36, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x55, 0x0a, 0x0a, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x36, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe6, 0x04, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x36, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x52, 0x63, 0x76, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x52, 0x63, 0x76, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x74, 0x71, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6f, 0x75, 0x74, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x71, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x6e, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x65, 0x63, 0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x66, 0x78, 0x52, 0x63, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x66, 0x78, 0x52, 0x63, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x66,
	0x78, 0x53, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x66, 0x78, 0x53,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x68,
	0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x1a, 0x4f,
	0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbf, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x70, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x49,
	0x70, 0x76, 0x36, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x53, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x36,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x36, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x36, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x58, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_api_proto_rawDescOnce sync.Once
	file_proto_api_proto_rawDescData = file_proto_api_proto_rawDesc
)

func file_proto_api_proto_rawDescGZIP() []byte {
	file_proto_api_proto_rawDescOnce.Do(func() {
		file_proto_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_api_proto_rawDescData)
	})
	return file_proto_api_proto_rawDescData
}

var file_proto_api_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_api_proto_goTypes = []interface{}{
	(*ShowBgpIpv6SummaryRequest)(nil), // 0: api.ShowBgpIpv6SummaryRequest
	(*ShowBgpIpv6SummaryResult)(nil),  // 1: api.ShowBgpIpv6SummaryResult
	(*BgpIpv6SummaryPeerInfo)(nil),    // 2: api.BgpIpv6SummaryPeerInfo
	(*ShowRouteMapRequest)(nil),       // 3: api.ShowRouteMapRequest
	(*ShowRouteMapResult)(nil),        // 4: api.ShowRouteMapResult
	(*RouteMapInfo)(nil),              // 5: api.RouteMapInfo
	(*RouteMapRule)(nil),              // 6: api.RouteMapRule
	nil,                               // 7: api.ShowBgpIpv6SummaryResult.PeersEntry
	nil,                               // 8: api.ShowRouteMapResult.RouteMapsEntry
}
var file_proto_api_proto_depIdxs = []int32{
	7, // 0: api.ShowBgpIpv6SummaryResult.peers:type_name -> api.ShowBgpIpv6SummaryResult.PeersEntry
	8, // 1: api.ShowRouteMapResult.routeMaps:type_name -> api.ShowRouteMapResult.RouteMapsEntry
	6, // 2: api.RouteMapInfo.routeMapRules:type_name -> api.RouteMapRule
	2, // 3: api.ShowBgpIpv6SummaryResult.PeersEntry.value:type_name -> api.BgpIpv6SummaryPeerInfo
	5, // 4: api.ShowRouteMapResult.RouteMapsEntry.value:type_name -> api.RouteMapInfo
	0, // 5: api.ShowBgpIpv6SummaryService.ShowBgpIpv6Summary:input_type -> api.ShowBgpIpv6SummaryRequest
	3, // 6: api.ShowRouteMapService.ShowRouteMap:input_type -> api.ShowRouteMapRequest
	1, // 7: api.ShowBgpIpv6SummaryService.ShowBgpIpv6Summary:output_type -> api.ShowBgpIpv6SummaryResult
	4, // 8: api.ShowRouteMapService.ShowRouteMap:output_type -> api.ShowRouteMapResult
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_api_proto_init() }
func file_proto_api_proto_init() {
	if File_proto_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowBgpIpv6SummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowBgpIpv6SummaryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpIpv6SummaryPeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowRouteMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowRouteMapResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMapInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMapRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_api_proto_goTypes,
		DependencyIndexes: file_proto_api_proto_depIdxs,
		MessageInfos:      file_proto_api_proto_msgTypes,
	}.Build()
	File_proto_api_proto = out.File
	file_proto_api_proto_rawDesc = nil
	file_proto_api_proto_goTypes = nil
	file_proto_api_proto_depIdxs = nil
}
