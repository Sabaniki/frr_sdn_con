syntax = "proto3";
package api;
option go_package = "./";


service ShowBgpIpv6SummaryService {
    rpc ShowBgpIpv6Summary (ShowBgpIpv6SummaryRequest) returns (ShowBgpIpv6SummaryResult);
}

message ShowBgpIpv6SummaryRequest {
}

// TODO: int32 → int16 にできる部分も多いはず
message ShowBgpIpv6SummaryResult {
    string routerId = 1;
    int32 as = 2;
    int32 vrfId = 3;
    string vrfName = 4;
    int32 tableVersion = 5;
    int32 ribCount = 6;
    int32 ribMemory = 7;
    int32  peerCount = 8;
    int32  peerMemory = 9;
    int32  peerGroupCount = 10;
    int32  peerGroupMemory = 11;
    map<string, BgpIpv6SummaryPeerInfo> peers = 12;
}

message BgpIpv6SummaryPeerInfo {
    int32 remoteAs = 1;
    int32 localAs = 2;
    int32 version = 3;
    int32 msgRcvd = 4;
    int32 msgSent = 5;
    int32 tableVersion = 6;
    int32 outq = 7;
    int32 inq = 8;
    string peerUptime = 9;
    uint32 peerUptimeMsec = 10;
    uint32 peerUptimeEstablishedEpoch = 11;
    int32 pfxRcd = 12;
    int32 pfxSnt = 13;
    string state = 14;
    string peerState = 15;
    int32 connectionsEstablished = 16;
    int32 connectionsDropped = 17;
    string desc = 18;
    string idType = 19;
}

service RouteMapService {
    rpc ShowRouteMap (ShowRouteMapRequest) returns (ShowRouteMapResult);
    rpc SetMed (SetMedRequest) returns (SetMedResult);
}

message ShowRouteMapRequest {
    string name = 1;
}

message ShowRouteMapResult {
    int32 invoked = 1;
    bool disabledOptimization = 2;
    bool processedChange = 3;
    repeated RouteMapRule rules = 4;
}
message RouteMapRule {
    int32 sequenceNumber = 1;
    string type = 2;
    uint32 invoked = 3;
    repeated string matchClauses = 4;
    repeated string setClauses = 5;
    string action = 6;
}

message SetMedRequest {
    string routeMap = 1;
    int32 sequenceNumber = 2;
    string type = 3;
    int32 med = 4;
}

message SetMedResult {
    int32 oldMed = 1;
    int32 currentMed = 2;
}

service InterfaceService {
    rpc ShowAllInterface (ShowAllInterfaceRequest) returns (ShowAllInterfaceResult);
    rpc ShowOneInterface (ShowOneInterfaceRequest) returns (ShowOneInterfaceResult);
    rpc ConfigInterface (ConfigInterfaceRequest) returns (ConfigInterfaceResult);
}

message ShowAllInterfaceRequest {}

message ShowAllInterfaceResult {

}

message ShowOneInterfaceRequest {
    string name = 1;
}

message ShowOneInterfaceResult {
    InterfaceInfo res = 1;
}

message ConfigInterfaceRequest {
    InterfaceInfo req = 1;
}

message ConfigInterfaceResult {
    InterfaceInfo res = 1;
}

message InterfaceInfo {
    string administrativeStatus = 1;
    string operationalStatus = 2;
    bool linkDetection = 3;
    int32 linkUps = 4;
    int32 linkDowns = 5;
    string vrfName = 6;
    bool pseudoInterface = 7;
    int32 index = 8;
    int32 metric = 9;
    int32 mtu = 10;
    int32 speed = 11;
    string flags = 12;
    string type = 13;
    string hardwareAddress = 14;
    repeated InterfaceAddr ipAddresses = 15;
    string interfaceType = 16;
    string interfaceSlaveType = 17;
    bool lacpBypass = 18;
    string evpnMh = 19;  // わからないのでとりあえず bytes に
    string protodown = 20;
}

message InterfaceAddr {
    string address = 1;
    bool secondary = 2;
    bool unnumbered = 3;
}